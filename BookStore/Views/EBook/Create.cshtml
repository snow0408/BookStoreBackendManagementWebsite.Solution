@model BookStore.Models.ViewModels.EBookVm


@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>新增電子書</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.BookId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BookId, new { htmlAttributes = new { @class = "form-control", @id = "bookId", @readonly = true } })
                @Html.ValidationMessageFor(model => model.BookId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.BookName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BookName, new { htmlAttributes = new { @class = "form-control", @id = "bookName" } })
                @Html.ValidationMessageFor(model => model.BookName, "", new { @class = "text-danger" })
                <div class="list-group" id="bookList"></div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileLink, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FileLink, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FileLink, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Sample, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Sample, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Sample, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="新增" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    const divBookList = document.querySelector('#bookList');
    const bookName = document.querySelector('#bookName');
    const bookId = document.querySelector('#bookId');
    var datas;
     //尋找書名
 bookName.addEventListener('input', async (event) => {
     const keyword = event.target.value.trim();

     if (keyword.length > 0) {
         //ajax
         const url = `@Url.Content("~/ebookspermission/searchebook")?keyword=${keyword}`;
         const response = await fetch(url);
         datas = await response.json();
         const bookNames = datas.map(book => book.BookName);

         const buttonsHTML = bookNames.map(BookName => `<button type="button" class="list-group-item list-group-item-action" onclick="clickHandler('divBookList', '${BookName}')">${BookName}</button>`).join('');

         divBookList.innerHTML = buttonsHTML;
     }
     else { divBookList.innerHTML = ""; }
 })
        const clickHandler = (buttonType, name) => {

            switch (buttonType) {
                case 'divBookList':
                    bookName.value = name;

                    matchedData = datas.find(data => data.BookName == name);
                    bookId.value = matchedData.Id;

                    divBookList.innerHTML = "";
                    break;
            }
        }
    </script>
}
